ds.colnames("test")
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(last_col()))
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(group_col()))
datashield.errors()
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(group_cols()))
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(starts_with("PM")))
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(ends_with("ED")))
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(contains("S_DIA")))
ds.colnames("test")
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(matches("[aeiou]")))
datashield.errors()
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(all_of(c("LAB_TSC", "LAB_TRIG"))))
datashield.errors()
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(any_of(c("LAB_TSC", "LAB_TRIG"))))
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(LAB_TSC,LAB_TRIG))
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/repos/dsTidyverse/R/selectDS.R", echo=TRUE)
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(LAB_TSC,LAB_TRIG))
ds_data <- eval(parse(text=.data), envir = parent.frame())
ds_data
split_string <- .format_encoded_expr(expr)
split_string
dplyr::select(ds_data, eval(str2expression("LAB_TSC")))
dplyr::select(ds_data, "LAB_TSC")
split_string
split_string
split_string[1]
split_string <- .format_encoded_expr(expr)
eval(split_string[1])
str2expression(split_string[1])
eval(str2expression(split_string[1]))
test <- LAB_TSC
eval(str2expression(split_string[1]))
dplyr::select(ds_data, eval(str2expression(split_string[1])))
split_string
ds_data <- eval(parse(text=.data), envir = parent.frame())
out <- .decode_tidy_eval(expr, .getEncodeKey())
out <- .remove_list(out)
out
out <- str_split(out, fixed(","), simplify = TRUE)
out
split_string
str_detect(x, "(")
x <- split_string[[1]]
x
str_detect(x, "(")
str_detect(x, fixed("("))
str_detect(x, fixed("_"))
out
out <- split_string %>%
map(function(x){
if(str_detect(x, fixed("(")){
out <- split_string %>%
map(function(x){
if(str_detect(x, fixed("(")){
out <- split_string %>%
map(function(x){
if(str_detect(x, fixed("("))){
dplyr::select(ds_data, .x)
}
})
out
x
dplyr::select(ds_data, .x)
out <- split_string %>%
map(function(x){
if(str_detect(x, fixed("("))){
dplyr::select(ds_data, x)
}
})
out
dplyr::select(ds_data, x)
out <- split_string %>%
map(function(x){
if(str_detect(x, fixed("("))){
dplyr::select(ds_data, all_of(x))
}
})
out
out <- split_string %>%
map(function(x){
if(str_detect(x, fixed("("))){
dplyr::select(ds_data, all_of(x))
return(x)
}
})
out
dplyr::select(ds_data, all_of(x))
out <- split_string %>%
map(function(x){
if(str_detect(x, fixed("("))){
out <- dplyr::select(ds_data, all_of(x))
return(out)
}
})
out
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/repos/dsTidyverse/R/selectDS.R", echo=TRUE)
out <- dplyr::select(ds_data, all_of(x))
out
split_string
out <- split_string %>%
map(function(x){
if(str_detect(x, fixed("("))){
out <- dplyr::select(ds_data, all_of(x))
return(out)
}
})
out
str_detect(x, fixed("("))
out <- split_string %>%
map(function(x){
if(!str_detect(x, fixed("("))){
out <- dplyr::select(ds_data, all_of(x))
return(out)
}
})
ds_data
ds_data <- eval(parse(text=.data), envir = parent.frame())
out <- split_string %>%
map(function(x){
if(!str_detect(x, fixed("("))){
out <- dplyr::select(ds_data, all_of(x))
return(out)
}
})
ds_data
split_string
split_string
out <- .decode_tidy_eval(expr, .getEncodeKey())
out
expr
out
.remove_spaces <- function(expr){
out <- str_replace_all(expr. fixed(" "), "")
.remove_spaces <- function(expr){
out <- str_replace_all(expr, fixed(" "), "")
return(out)
}
out <- .remove_list(out)
out
out <- .remove_spaces(out)
out
out <- str_split(out, fixed(","), simplify = TRUE)
split_string <- .format_encoded_expr(expr)
split_string
out <- str_split(out, fixed(","), simplify = TRUE)
out
out <- .remove_spaces(out)
out
split_string <- str_split(out, fixed(","), simplify = TRUE)
split_string
out <- split_string %>%
map(function(x){
if(!str_detect(x, fixed("("))){
out <- dplyr::select(ds_data, all_of(x))
return(out)
}
})
out
ds_data <- eval(parse(text=.data), envir = parent.frame())
out <- .decode_tidy_eval(expr, .getEncodeKey())
out <- .remove_list(out)
out <- .remove_spaces(out)
split_string <- str_split(out, fixed(","), simplify = TRUE)
out_list <- split_string %>%
map(function(x){
if(!str_detect(x, fixed("("))){
out <- dplyr::select(ds_data, all_of(x))
return(out)
}
}) else {
out_list <- split_string %>%
map(function(x){
if(!str_detect(x, fixed("("))){
out <- dplyr::select(ds_data, all_of(x))
return(out)
} else {
dplyr::select(ds_data, eval(str2expression(.x)))
}
})
out_list
out <- out_list %<% bind_cols()
out
out_list
str(out_list)
out <- out_list %>% bind_cols()
out
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/repos/dsTidyverse/R/selectDS.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/repos/dsTidyverse/R/selectDS.R", echo=TRUE)
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(LAB_TSC,LAB_TRIG))
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/repos/dsTidyverse/R/selectDS.R", echo=TRUE)
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(LAB_TSC,LAB_TRIG))
datashield.errors()
.getEncodeKey <- function(){
encode_list <- list(
input = c("list", "(", ")", "\"", ",", " ", "c", ":", "!", "&", "|"),
output = c("$LIST$", "$LB", "$RB$", "$QUOTE$", "$COMMA$", "$SPACE$", "$C$", "$COLON$", "$EXCL$", "$AND$", "$OR$")
)
return(encode_list)
}
.decode_tidy_eval <- function(input_string, encode_key){
encode_vec <- setNames(encode_key$input, encode_key$output)
output_string <- str_replace_all(input_string, fixed(encode_vec))
return(output_string)
}
.remove_list <- function(string_decoded){
string_decoded %>%
str_replace_all(pattern = fixed("list("), replacement = "") %>%
str_sub(end = -2)
}
.format_encoded_expr <- function(expr){
return(out)
}
.remove_spaces <- function(expr){
out <- str_replace_all(expr, fixed(" "), "")
return(out)
}
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(LAB_TSC,LAB_TRIG))
ds.colnames("test")
ds.colnames("CNSIM1")
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/repos/dsTidyverse/R/selectDS.R", echo=TRUE)
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(LAB_TSC:MEDI_LPD))
ds_data <- eval(parse(text=.data), envir = parent.frame())
out <- .decode_tidy_eval(expr, .getEncodeKey())
out <- .remove_list(out)
out <- .remove_spaces(out)
out
split_string <- str_split(out, fixed(","), simplify = TRUE)
split_string
split_string
split_string[[1]]
dplyr::select(ds_data, all_of(split_string[[1]]))
dplyr::select(ds_data, split_string[[1]])
str_2_expression(split_string[[1]])
str2expression(split_string[[1]])
eval(str2expression(split_string[[1]]))
dplyr::select(ds_data, eval(str2expression(split_string[[1]]), parent.frame())
)
dplyr::select(ds_data, eval(str2expression(split_string[[1]]), parent.frame()))
dplyr::select(ds_data, !!split_string[[1]])
dplyr::select(ds_data, !!!split_string[[1]])
deparse(substitute(split_string[[1]]))
dplyr::select(ds_data, deparse(substitute(split_string[[1]])))
substitute(split_string[[1]]
)
eval(substitute(split_string[[1]]))
split_string[[1]]
eval(substitute(split_string[[1]]))
rlang::parse_expr(split_string[[1]])
dplyr::select(ds_data, rlang::parse_expr(split_string[[1]]))
select_expr <- rlang::parse_exprs( select_str )
select_str <- "mpg; cyl"
select_expr <- rlang::parse_exprs( select_str )
select_expr
select_str
select_expr <- rlang::parse_exprs( select_str )
select_expr
mtcars %>% select( !!!select_expr )
select_str <- "mpg = cyl"
select_expr <- rlang::parse_exprs( select_str )
mtcars %>% select( !!!select_expr )
select_str <- "cyl = mpg"
select_expr <- rlang::parse_exprs( select_str )
mtcars %>% select( !!!select_expr )
mtcars
select_str <- "cyl=mpg"
select_expr <- rlang::parse_exprs( select_str )
mtcars %>% select( !!!select_expr )
mtcars
select_str <- "mpg:disp"
select_expr <- rlang::parse_exprs( select_str )
mtcars %>% select( !!!select_expr )
select_str <- 'starts_with("PM") & ends_with("ED")'
select_str
select_expr <- rlang::parse_exprs( select_str )
select_expr
mtcars %>% select( !!!select_expr )
select_str <- 'starts_with("d") & ends_with("p")'
select_expr <- rlang::parse_exprs( select_str )
mtcars %>% select( !!!select_expr )
select_str <- 'starts_with("d") | ends_with("p")'
select_expr <- rlang::parse_exprs( select_str )
mtcars %>% select( !!!select_expr )
select_str <- 'matches("[aeiou]")'
select_expr <- rlang::parse_exprs( select_str )
mtcars %>% select( !!!select_expr )
select_str <- 'all_of(c("LAB_TSC", "LAB_TRIG"))'
select_expr <- rlang::parse_exprs( select_str )
mtcars %>% select( !!!select_expr )
out
out
select_expr <- rlang::parse_exprs( out )
select_expr
out <- .remove_spaces(out)
select_expr <- rlang::parse_exprs( out )
mtcars %>% select( !!!select_expr )
ds_data %>% select( !!!select_expr )
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/repos/dsTidyverse/R/selectDS.R", echo=TRUE)
usethis::use_test("dsSelect")
expr
out <- .decode_tidy_eval(expr, .getEncodeKey())
out
ds_data
data <- mtcars
mtcars
select_expr <- rlang::parse_exprs( "mpg:drat" )
select_expr
out <- mt_cars %>% select( !!!select_expr)
out <- mtcars %>% select( !!!select_expr)
out
test_that("String with : works in select", {
select_expr <- rlang::parse_exprs( "mpg:drat" )
out <- mtcars %>% select( !!!select_expr)
expect_equal(colnames(mtcars), c("mpg", "cyl", "disp", "hp", "drat"))
})
library(testthat)
test_that("String with : works in select", {
select_expr <- rlang::parse_exprs( "mpg:drat" )
out <- mtcars %>% select( !!!select_expr)
expect_equal(colnames(mtcars), c("mpg", "cyl", "disp", "hp", "drat"))
})
View(mtcars)
test_that("String with : works in select", {
select_expr <- rlang::parse_exprs( "mpg:drat" )
out <- mtcars %>% select( !!!select_expr)
expect_equal(colnames(out), c("mpg", "cyl", "disp", "hp", "drat"))
})
select_expr <- rlang::parse_exprs( "starts_with(m)" )
out <- mtcars %>% select( !!!select_expr)
out <- mtcars %>% select( !!select_expr)
select_expr <- rlang::parse_exprs( "starts_with(m)" )
select_expr
select_expr <- rlang::parse_exprs( "starts_with('m')" )
out <- mtcars %>% select( !!!select_expr)
expect_equal(colnames(out), c("mpg", "cyl", "disp", "hp", "drat"))
out
test_that("String with 'starts_with()' works", {
select_expr <- rlang::parse_exprs( "starts_with('m')" )
out <- mtcars %>% select( !!!select_expr)
expect_equal(colnames(out), "mpg")
})
select_expr <- rlang::parse_exprs( "ends_with('m')" )
out <- mtcars %>% select( !!!select_expr)
out
test_that("String with 'ends_with()' works", {
select_expr <- rlang::parse_exprs( "ends_with('m')" )
out <- mtcars %>% select( !!!select_expr)
expect_equal(colnames(out), "am")
})
out <- test_string("mpg:drat")
test_string <- function(string){
select_expr <- rlang::parse_exprs( string )
out <- mtcars %>% select( !!!select_expr)
return(out)
}
out <- test_string("mpg:drat")
out
test_that("String with : works in select", {
out <- test_string("mpg:drat")
expect_equal(colnames(out), c("mpg", "cyl", "disp", "hp", "drat"))
})
test_that("String with 'starts_with()' works", {
out <- test_string("starts_with('m')")
expect_equal(colnames(out), "mpg")
})
test_that("String with 'ends_with()' works", {
out <- test_string("ends_with('m')")
expect_equal(colnames(out), "am")
})
out <- test_string("matches('[aeiou]')")
out
test_that("String with 'matches()' works", {
out <- test_string("matches('[aeiou]')")
expect_equal(colnames(out), c("disp", "drat", "qsec", "am", "gear", "carb"))
})
out <- test_string("disp", "drat", "qsec")
out <- test_string(c("disp", "drat", "qsec"))
out
out <- test_string(c("disp", "drat", "qsec"))
out
out <- test_string("everything()")
out
test_that("String with 'everything()' works", {
out <- test_string("everything()")
expect_equal(colnames(out), colnames(mtcars))
})
out <- test_string("last_col()")
expect_equal(colnames(out), colnames(mtcars))
test_that("String with 'last_col' works", {
out <- test_string("last_col()")
expect_equal(colnames(out), "carb")
})
out <- test_string("group_cols()")
out
expect_null(colnames(out))
expect_nullequal(colnames(out), "")
expect_equal(colnames(out), "")
out
colnames(out)
expect_equal(colnames(out), " ")
str(colnames(ot))
str(colnames(out))
test_that("String with 'group_cols()' works", {
out <- test_string("group_cols()")
expect_equal(colnames(out), character(0))
})
mtcars
out <- test_string("contains('ra')")
out
test_that("String with 'contains()' works", {
out <- test_string("contains('ra')")
expect_equal(colnames(out), "drat")
})
mtcars
out <- test_string("-mpg, -cyl")
out <- test_string("-mpg,-cyl")
out <- test_string("-mpg","-cyl")
out <- test_string("mpg,cyl")
out <- test_string(c("-mpg, -cyl"))
out <- test_string(c("disp,drat,qsec"))
select_expr <- rlang::parse_exprs( c("disp,drat,qsec") )
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(LAB_TSC,MEDI_LPD))
ds_data <- eval(parse(text=.data), envir = parent.frame())
out <- .decode_tidy_eval(expr, .getEncodeKey())
out <- .remove_list(out)
out <- .remove_spaces(out)
out
select_expr <- rlang::parse_exprs( out )
out <- test_string("starts_with('m') & ends_with('m')")
out
out <- test_string("starts_with('c') & ends_with('b')")
out
out <- test_string("starts_with('c') | ends_with('b')")
out
expect_equal(colnames(out), c("cyl", "carb"))
out <- test_string("all_of(mpg,cyl)")
out <- test_string("all_of('mpg','cyl')")
expect_equal(colnames(out), c("mpg", "cyl"))
out <- test_string("any_of('mpg','cyl')")
out <- test_string("all_of(c('mpg','cyl'))")
out
test_that("String with 'all_of' work", {
out <- test_string("all_of(c('mpg','cyl'))")
expect_equal(colnames(out), c("mpg", "cyl"))
})
test_that("String with '-' works", {
out <- test_string(c("-mpg,-cyl"))
expect_equal(colnames(out), "drat")
})
test_that("String with 'any_of' work", {
out <- test_string("all_of(c('mpg','cyl'))")
expect_equal(colnames(out), c("mpg", "cyl"))
})
test_that("String with '|' work", {
out <- test_string("starts_with('c') | ends_with('b')")
expect_equal(colnames(out), c("cyl", "carb"))
})
test_that("Strings with '&' work", {
out <- test_string("starts_with('c') & ends_with('b')")
expect_equal(colnames(out), "carb")
})
mtcars
out <- test_string("starts_with('c') | ends_with('b') & contains('ra') & gear:carb")
out
out <- test_string("(starts_with('c') | ends_with('b')) & contains('ra') & gear:carb")
out
out <- test_string("(starts_with('c') | ends_with('b') | contains('ra') | gear:carb")
out <- test_string("(starts_with('c') & ends_with('b')) | contains('ra') | gear:carb")
out
test_that("Complex strings work", {
out <- test_string("(starts_with('c') & ends_with('b')) | contains('ra') | gear:carb")
expect_equal(colnames(out), c("carb", "drat", "gear"))
})
select_expr <- rlang::parse_exprs( c("disp,drat,qsec") )
select_expr <- rlang::parse_exprs( c("all_of(c('mpg','cyl'))") )
select_expr
select_expr <- rlang::parse_exprs( c("all_of(c('mpg','cyl'))") )
select_expr <- rlang::parse_exprs( c("disp,drat,qsec") )
select_expr <- rlang::parse_exprs( c("c(disp,drat,qsec)") )
select_expr
out <- test_string(c("c(disp,drat,qsec)"))
out
select_expr <- rlang::parse_exprs( c("disp,drat,qsec,all_of(c('mpg','cyl'))") )
dplyr::select(mtcars, disp,drat,qsec,all_of(c('mpg','cyl')))
out <- test_string("-mpg")
out
test_that("String with '-' works", {
out <- test_string("-mpg")
expect_equal(colnames(out), c("cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "am", "gear", "carb"))
})
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/repos/dsTidyverse/R/selectDS.R", echo=TRUE)
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(all_of(c("LAB_TSC", "LAB_TRIG"))))
ds_data <- eval(parse(text=.data), envir = parent.frame())
ds_data
out <- .decode_tidy_eval(expr, .getEncodeKey())
out
out <- .remove_list(out)
out
out <- .remove_spaces(out)
out
select_expr <- rlang::parse_exprs( out )
select_expr
out <- ds_data %>% select( !!!select_expr )
source("~/Library/Mobile Documents/com~apple~CloudDocs/work/repos/dsTidyverse/R/selectDS.R", echo=TRUE)
ds.select(.data = "CNSIM1", newobj = "test", select_args = list(all_of(c("LAB_TSC", "LAB_TRIG"))))
ds.colnames("test")
?parse_exprs
getwd()
setwd("../dsTidyverse")
usethis::use_test("dsSelect")
getwd()
devtools::load_all()
usethis::use_test("dsSelect")
